/*
* Lite Publisher
* Copyright (C) 2010- 2015Vladimir Yushko http://litepublisher.com/
* Licensed under the MIT (mit.txt)

Содержание:
1. Об этом документе
2. В чем разница между темой и темой админки?
2. Описание тегов и шаблонов

1. Этот файл является одновременно документацией и набором шаблонов темы админки CMS LitePublisher. В этом файле описываются и устанавливаются лишь часть шаблонов темы админки, но ведется работа по переносу всех шаблонов в этот файл. О формате этой темы и файла about.ini смотрите файл themes/default/theme.txt
2. Тема админки является лишь набором html шаблонов собранных в одном месте и по своей сути не является автономной темой. Админка, как и другие части сайта, использует обыкновенные темы. Для генерации html контента не хватает шаблонов, описанных в обычной теме, и поэтому приходится декларировать часть шаблонов в теме админки. Обратите внимание, что часто употребляющиеся шаблоны описаны в обычной теме в шаблонах content.admin.* - Если неполучается сегенерировать код на их основе, то приходится выкручиваться черех шаблоны темы админки.

В CMS есть две линейки тем: обыкновенные для сайта и темы для админки. Эти темы не пересекаются. Темы админки начинаются со слова admin в названии папки. Невозможно для сайта выбрать тему админки: даже потенциальная возможность этого заблокирована.

Перейдем к описанию шаблонов. Первым задекларируем шаблон таблицы с рамками.
*/

table = [
<div class="table-responsive section">
    <table class="$class">
        <thead>
            <tr>
                $head
            </tr>
        </thead>
        <tbody>
            $body
        </tbody>
    </table>
</div>
]

/*
В шаблоне table есть 3 тега:

$class - имя html класса, берется из темы шаблон content.admin.tableclass. Сделано для того, чтобы при переключении темы сайта также менялась по возможности админка
$head - заголовок столбцов
$body - строки таблицы, то есть сама таблица

По сути шаблон table является примитивом таблицы. Используется во многих местах админки.

Следующие шабоны - примитивные чекбоксы
*/

checkbox = [
   <input type="checkbox" name="$name-$id" value="$id" />
]

invertcheck = [
   <input type="checkbox" class="invertcheck" />
]

/*
Два примитивных шаблона чекбоксов, в первом используются два тега:

$name - имя чекбокса
$id - id элемента, например в  id записи

Шаблоны checkbox и invertcheck применяются как правило в таблицах: check для ячейки, чтобы отметить строку. invertcheck - для первого чекбокса, который инвертирует чекбоксы. В шаблоне invertcheck вообще отсутствуют какие либо теги, но есть класс invertcheck, который обрабатывается js скриптомв админке js/litepubl /admin/admin.js


Следующий шаблон - управление колонками в таблице
*/

tablecols = [
<div class="dropdown" id="tablecols-menu">
    <button type="button" class="btn btn-default dropdown-toggle" id="tablecols-button" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
        $lang.togglecols
        <span class="caret"></span>
    </button>

    <ul class="dropdown-menu" aria-labelledby="tablecols-button">
    </ul>
</div>

<script type="text/javascript" src="$site.files/js/litepubl/admin/tablecolumns.min.js"></script>
<script type="text/javascript">
    $(document).ready(function() {
        litepubl.tablecols = new litepubl.Tablecols("#tablecols-menu");
    });
</script>
]

/*
Шаблон предназначен и используется для таблиц у которых много колонок, возможно большой ширины. Чтобы удобно было просматривать широкую таблицу, можно часть колонок спрятать. При последующих открытиях страницы состояние колонок будет сохранено. Все сделано на javascript.

Шаблон состоит из двух частей:

- html для выпадающего меню
- javascript для управления колонками

В html есть пустой список, который заполняется каждый раз при открытии меню. Для этого используется шаблон по умолчанию:

<li class="checkbox"><label><input type="checkbox" value="%%index%%" %%checked%% />%%title%%</label></li>

который объявлен внутри js. Чтобы изменить и этот шаблон измените строку иницализации:

litepubl.tablecols = new litepubl.Tablecols("#tablecols-menu", '<li>мой шаблон чекбокса в списке или что там у вас будет</li>');

Подскажем также, как подключить возможность выбора колонок из php:

$form = new adminform();
$form->before = admintheme::i()->templates['tablecols'];
*/

section = [
<div class="section">
    <h4>$title</h4>
    $content
</div>
]

/*
Простой абстрактный шаблон с двумя тегами:
$title - заголовок блока/секции
$content - содержание блока/секции

Может употреблятся в разных местах для разделения блоков информации

Следующий шаблон - отцентрированная группа кнопок
*/

centergroup = [
<div class="text-center">
    <div class="btn-group">
        $buttons
    </div>
</div>
]

/*
Шаблон содержит один тег $buttons - это кнопки. Должно получиться: несколько кнопок в одной строке выравнены по центру. Применяется в формах, где несколько кнопок в конце формы, чтобы выровнять их по центру.
*/

inline = [
   <div class="form-inline">$content</div>
]

/*
Шаблон является контейнером для выстраивания контролов в одну строку и содержит всего один тег $content - содержание для выравнивание в одну строку. Теоритичиски можно было бы обойтись шаблоном для соответствующего класса (здесь это form-inline), но вероятно для других тем потребуется более сложный html
*/

calendar = [
<div class="calendar section">
    <div class="calendar-title">$title</div>
    <div class="form-inline">

        <div class="form-group">
            <label for="text-$name">$lang.date</label>
            <input type="date" name="$name" class="form-control date-edit tooltip-toggle" id="text-$name" value="$date" title="$lang.tipdate" data-format="$format" />
        </div>

        <div class="form-group">
            <label for="text-$name-time">$lang.time</label>
            <input type="time" name="$name-time" class="form-control time-edit tooltip-toggle" id="text-$name-time" value="$time" title="$lang.tiptime" />
        </div>

        <button type="button" id="calendar-$name" class="btn btn-default tooltip-toggle" title="$lang.tipcalendar">
            <span class="fa fa-calendar text-success"></span>
        </button>

    </div>
</div>
]

/*
Шаблон для ввода даты и времени. Шаблон не является календарем - календарь организуется через javascript, например из библиотеки jquery ui. Этот шаблон всего лишь показывает в одной строке заголовок, поле ввода и кнопку для вызова календаря. В шаблоне следующие теги:

$title - заголовок
$name - имя контрола
$date - дата , может быть пустой строкой
$time - время, может быть пустой строкой
$format - формат даты, по умолчанию это строка "d.m.Y", то есть в формате для функции php date. На сегодня это значение вставлено в атрибут data-format и никак не используется, сделан задел на будущее.

Дляобслуживания кнопки вызова календаря используется скрипт js/litepubl/admin/calendar.js, который в свою очердь исползует jquery ui библиотеку

На php есть короткий способ использования шаблона admintheme::i()->getcalendar($name, $date);
*/

daterange = [
<div class="form-inline date-range section">
    <div class="form-group">
        <label for="text-from">$lang.from</label>
        <input type="date" name="from" class="form-control date-edit tooltip-toggle" id="text-from" value="$from" title="$lang.tipdate" data-format="$format" />
    </div>

    <button type="button" id="calendar-from" class="btn btn-default tooltip-toggle" title="$lang.tipcalendar">
        <span class="fa fa-calendar text-success"></span>
    </button>

    <div class="form-group">
        <label for="text-to">$lang.to</label>
        <input type="date" name="to" class="form-control date-edit tooltip-toggle" id="text-to" value="$to" title="$lang.tipdate" data-format="$format" />
    </div>

    <button type="button" id="calendar-to" class="btn btn-default tooltip-toggle" title="$lang.tipcalendar">
        <span class="fa fa-calendar text-success"></span>
    </button>

</div>
]

/*
Шаблон предназначен для ввода диапазона дат от и до 	и имеет следующие теги:

$from - дата от, может быть бустой строкой
$to - дата до, может быть пустой строкой
$format - формат даты, смотрите комментарий к шаблону calendar
Дляобслуживания кнопки вызова календаря используется скрипт js/litepubl/admin/calendar.js, который в свою очердь исползует jquery ui библиотеку

На php есть короткий способ использования шаблона admintheme::i()->getdaterange($from, $to);
*/

radiogroup = [
<div class="btn-group" data-toggle="buttons">
    $button = [
    <label class="btn btn-default">
        <input type="radio" name="$name" value="$value" autocomplete="off"> $title
    </label>
    ]
    
    $active = [
    <label class="btn btn-default active">
        <input type="radio" name="$name" value="$value" autocomplete="off" checked> $title
    </label>
    ]
</div>
]

/*
Шаблон группы радиокнопок тесно завязан на bootstrap и представляет собой классичиские прямоугольные кнопки с функциями радиокнопок. Несмотря на html разметку type="radio" выглядять они по другому. Кнопки находятся в одной строке. Шаблон пока мало используется и на настоящий момент вы можете их увидить в таблице виджетов. Шаблон radiogroup имеет два вложенных шаблона:

$button - одна кнопка
$active - нажатая кнопка

Внутри $button и $active исползуются следующие теги:

$name - имя кнопки, атрибут name
$value - значение кнопки, атрибут value
$title - текст кнопки

Следующий шаблон - добавление виджетов
*/

addwidgets = [
<h4><a href="#addwidgets-body" id="addwidgets-header" class="dashed">$lang.addwidgets</a></h4>
<div id="addwidgets-body" class="hidden"><!--
        <form action="" method="post">
            $checkboxes
            <input type="hidden" name="idview" value="$idview" />
            <input type="hidden" name="action" value="add" />
        </form>
--></div>

<script type="text/javascript" src="$site.files/js/litepubl/admin/widgets.add.min.js"></script>
]

/*
Шаблон предназначен для страницы виджетов, в частности диалог добавления новых виджетов. Из тегов, кроме языка $lang.* встречается всего один тег - $checkboxes, который является  набором чекбоксов из content.admin.checkbox для каждого виджета, не включенного в сайдбар. После выбора флажков в диалоговом окне будет самбит формы. Из примечательного в шаблоне то, что сама форма прячется внутри html комментария. Еще неизвестно будет ли вызван ддиалог добавления виджетов и загромаждать dom дерево нет желания. Реализовать сценарий, при котором чекбоксы запрашивались бы аяксом с сервера не было ни желания и главное время: дополнительная работа без очевидных плюсов.
*/

form = [
<div class="form-holder">
    $title = [<h4>$title</h4>]
    $before
    <form $attr>
        $body
    </form>
</div>
]

/*
Шаблон form является альтернативой для шаблона из основной темы content.admin.form Если требовалось незначительно модифицировать форму, то шаблон content.admin.form не справлялся с этой задачей. Рассмотрим теги:

$title - подшаблон заголовка формы. Если заголовка нет, то пустая строка
$before - контент после заголовка и перед формой, как правило пустая строка
$attr - атрибуты формы, как минимум строка method="post", опционально может включать class, id, action, encytype
$body - контролы формы

Этот шаблон используется php классом adminform и был для него специально добавил. Приведем примеры на php:

$form = new adminform();
$form->title = 'Заголовок формы';
$form->body = '[text=title]';
*/