/*
* Lite Publisher
* Copyright (C) 2010- 2015Vladimir Yushko http://litepublisher.com/
* Licensed under the MIT (mit.txt)

Содержание:
1. Об этом документе
2. В чем разница между темой и темой админки?
2. Описание тегов и шаблонов

1. Этот файл является одновременно документацией и набором шаблонов темы админки CMS LitePublisher. В этом файле описываются и устанавливаются лишь часть шаблонов темы админки, но ведется работа по переносу всех шаблонов в этот файл. О формате этой темы и файла about.ini смотрите файл themes/default/theme.txt
2. Тема админки является лишь набором html шаблонов собранных в одном месте и по своей сути не является автономной темой. Админка, как и другие части сайта, использует обыкновенные темы. Для генерации html контента не хватает шаблонов, описанных в обычной теме, и поэтому приходится декларировать часть шаблонов в теме админки. Обратите внимание, что часто употребляющиеся шаблоны описаны в обычной теме в шаблонах content.admin.* - Если неполучается сегенерировать код на их основе, то приходится выкручиваться черех шаблоны темы админки.

В CMS есть две линейки тем: обыкновенные для сайта и темы для админки. Эти темы не пересекаются. Темы админки начинаются со слова admin в названии папки. Невозможно для сайта выбрать тему админки: даже потенциальная возможность этого заблокирована.

Перейдем к описанию шаблонов. Первым задекларируем шаблон таблицы с рамками.
*/

table = [
<div class="table-responsive section">
    <table class="$class">
        <thead>
            <tr>
                $head
            </tr>
        </thead>
        <tbody>
            $body
        </tbody>
    </table>
</div>
]

/*
В шаблоне table есть 3 тега:

$class - имя html класса, берется из темы шаблон content.admin.tableclass. Сделано для того, чтобы при переключении темы сайта также менялась по возможности админка
$head - заголовок столбцов
$body - строки таблицы, то есть сама таблица

По сути шаблон table является примитивом таблицы. Используется во многих местах админки.

Следующие шабоны - примитивные чекбоксы
*/

checkbox = [
   <input type="checkbox" name="$name-$id" value="$id" />
]

invertcheck = [
   <input type="checkbox" class="invertcheck" />
]

/*
Два примитивных шаблона чекбоксов, в первом используются два тега:

$name - имя чекбокса
$id - id элемента, например в  id записи

Шаблоны checkbox и invertcheck применяются как правило в таблицах: check для ячейки, чтобы отметить строку. invertcheck - для первого чекбокса, который инвертирует чекбоксы. В шаблоне invertcheck вообще отсутствуют какие либо теги, но есть класс invertcheck, который обрабатывается js скриптомв админке js/litepubl /admin/admin.js


Следующий шаблон - управление колонками в таблице
*/

tablecols = [
<div class="dropdown" id="tablecols-menu">
    <button type="button" class="btn btn-default dropdown-toggle" id="tablecols-button" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
        $lang.togglecols
        <span class="caret"></span>
    </button>

    <ul class="dropdown-menu" aria-labelledby="tablecols-button">
    </ul>
</div>

<script type="text/javascript" src="$site.files/js/litepubl/admin/tablecolumns.min.js"></script>
<script type="text/javascript">
    $(document).ready(function() {
        litepubl.tablecols = new litepubl.Tablecols("#tablecols-menu");
    });
</script>
]

/*
Шаблон предназначен и используется для таблиц у которых много колонок, возможно большой ширины. Чтобы удобно было просматривать широкую таблицу, можно часть колонок спрятать. При последующих открытиях страницы состояние колонок будет сохранено. Все сделано на javascript.

Шаблон состоит из двух частей:

- html для выпадающего меню
- javascript для управления колонками

В html есть пустой список, который заполняется каждый раз при открытии меню. Для этого используется шаблон по умолчанию:

<li class="checkbox"><label><input type="checkbox" value="%%index%%" %%checked%% />%%title%%</label></li>

который объявлен внутри js. Чтобы изменить и этот шаблон измените строку иницализации:

litepubl.tablecols = new litepubl.Tablecols("#tablecols-menu", '<li>мой шаблон чекбокса в списке или что там у вас будет</li>');

Подскажем также, как подключить возможность выбора колонок из php:

$form = new adminform();
$form->before = admintheme::i()->templates['tablecols'];
*/

section = [
<div class="section">
    <h4>$title</h4>
    $content
</div>
]

/*
Простой абстрактный шаблон с двумя тегами:
$title - заголовок блока/секции
$content - содержание блока/секции

Может употреблятся в разных местах для разделения блоков информации

Следующий шаблон - отцентрированная группа кнопок
*/

centergroup = [
<div class="text-center">
    <div class="btn-group">
        $buttons
    </div>
</div>
]

/*
Шаблон содержит один тег $buttons - это кнопки. Должно получиться: несколько кнопок в одной строке выравнены по центру. Применяется в формах, где несколько кнопок в конце формы, чтобы выровнять их по центру.
 
 Следующий шаблон - группа радиокнопок
*/

radiogroup = [
<div class="btn-group" data-toggle="buttons">
    $button = [
    <label class="btn btn-default">
        <input type="radio" name="$name" value="$value" autocomplete="off"> $title
    </label>
    ]
    
    $active = [
    <label class="btn btn-default active">
        <input type="radio" name="$name" value="$value" autocomplete="off" checked> $title
    </label>
    ]
</div>
]

/*
Шаблон группы радиокнопок тесно завязан на bootstrap и представляет собой классичиские прямоугольные кнопки с функциями радиокнопок. Несмотря на html разметку type="radio" выглядять они по другому. Кнопки находятся в одной строке. Шаблон пока мало используется и на настоящий момент вы можете их увидить в таблице виджетов. Шаблон radiogroup имеет два вложенных шаблона:

$button - одна кнопка
$active - нажатая кнопка

Внутри $button и $active исползуются следующие теги:

$name - имя кнопки, атрибут name
$value - значение кнопки, атрибут value
$title - текст кнопки
*/